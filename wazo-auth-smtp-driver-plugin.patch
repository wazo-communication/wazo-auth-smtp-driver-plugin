diff --git a/wazo_auth/__init__.py b/wazo_auth/__init__.py
index 3d1e9964..34bb23bc 100644
--- a/wazo_auth/__init__.py
+++ b/wazo_auth/__init__.py
@@ -1,14 +1,16 @@
-# Copyright 2015-2024 The Wazo Authors  (see the AUTHORS file)
+# Copyright 2015-2025 The Wazo Authors  (see the AUTHORS file)
 # SPDX-License-Identifier: GPL-3.0-or-later
 
 from wazo_auth.interfaces import (
     DEFAULT_XIVO_UUID,
     BaseAuthenticationBackend,
+    BaseEmailNotification,
     BaseMetadata,
 )
 
 __all__ = [
     'BaseAuthenticationBackend',
+    'BaseEmailNotification',
     'BaseMetadata',
     'DEFAULT_XIVO_UUID',
 ]
diff --git a/wazo_auth/config.py b/wazo_auth/config.py
index 0d6648f8..2f7e869f 100644
--- a/wazo_auth/config.py
+++ b/wazo_auth/config.py
@@ -1,4 +1,4 @@
-# Copyright 2015-2024 The Wazo Authors  (see the AUTHORS file)
+# Copyright 2015-2025 The Wazo Authors  (see the AUTHORS file)
 # SPDX-License-Identifier: GPL-3.0-or-later
 
 import argparse
@@ -26,6 +26,7 @@ _DEFAULT_CONFIG = {
     'password_reset_from_address': 'noreply@wazo.community',
     'password_reset_email_template': '/var/lib/wazo-auth/templates/password_reset_email.jinja',
     'password_reset_email_subject_template': '/var/lib/wazo-auth/templates/password_reset_email_subject.jinja',  # noqa
+    'email_notification_plugin': 'smtp',
     'email_confirmation_expiration': 172800,
     'email_confirmation_template': '/var/lib/wazo-auth/templates/email_confirmation.jinja',
     'email_confirmation_subject_template': '/var/lib/wazo-auth/templates/email_confirmation_subject.jinja',  # noqa
diff --git a/wazo_auth/controller.py b/wazo_auth/controller.py
index ea544961..fc74e1a6 100644
--- a/wazo_auth/controller.py
+++ b/wazo_auth/controller.py
@@ -1,4 +1,4 @@
-# Copyright 2015-2024 The Wazo Authors  (see the AUTHORS file)
+# Copyright 2015-2025 The Wazo Authors  (see the AUTHORS file)
 # SPDX-License-Identifier: GPL-3.0-or-later
 
 import logging
@@ -7,6 +7,7 @@ import sys
 import threading
 from functools import partial
 
+from stevedore import driver
 from xivo import plugin_helpers
 from xivo.consul_helpers import ServiceCatalogRegistration
 from xivo.status import StatusAggregator
@@ -81,7 +82,24 @@ class Controller:
             self._tenant_service,
             self._saml_service,
         )
-        email_service = services.EmailService(self.dao, config, template_formatter)
+
+        email_notification_plugin = config['email_notification_plugin']
+        logger.info("Loading driver plugin email: %s", email_notification_plugin)
+        email_driver = driver.DriverManager(
+            namespace='wazo_auth.email_notification',
+            name=email_notification_plugin,
+            invoke_on_load=True,
+            invoke_kwds={
+                'config': config,
+                'template_formatter': template_formatter,
+            },
+        ).driver
+        email_service = services.EmailService(
+            self.dao,
+            config,
+            email_driver,
+        )
+
         enabled_external_auth_plugins = [
             name
             for name, value in config['enabled_external_auth_plugins'].items()
diff --git a/wazo_auth/interfaces.py b/wazo_auth/interfaces.py
index b8c404f2..88c01ae0 100644
--- a/wazo_auth/interfaces.py
+++ b/wazo_auth/interfaces.py
@@ -1,9 +1,10 @@
-# Copyright 2015-2024 The Wazo Authors  (see the AUTHORS file)
+# Copyright 2015-2025 The Wazo Authors  (see the AUTHORS file)
 # SPDX-License-Identifier: GPL-3.0-or-later
 
 import abc
 import logging
 import os
+from collections import namedtuple
 
 DEFAULT_XIVO_UUID = os.getenv('XIVO_UUID')
 logger = logging.getLogger(__name__)
@@ -83,3 +84,20 @@ class BaseMetadata(metaclass=abc.ABCMeta):
         this method.
         """
         return DEFAULT_XIVO_UUID
+
+
+EmailDestination = namedtuple('EmailDestination', ['name', 'address'])
+
+
+class BaseEmailNotification(metaclass=abc.ABCMeta):
+    def __init__(self, *args, **kwargs):
+        """Initialize this plugin instance from the given configuration"""
+        pass
+
+    def send_confirmation(self, context: dict) -> None:
+        """Send confirmation email link"""
+        pass
+
+    def send_password_reset(self, context: dict) -> None:
+        """Send password reset email link"""
+        pass
diff --git a/wazo_auth/plugins/email_notification/__init__.py b/wazo_auth/plugins/email_notification/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/wazo_auth/plugins/email_notification/smtp.py b/wazo_auth/plugins/email_notification/smtp.py
new file mode 100644
index 00000000..f403c159
--- /dev/null
+++ b/wazo_auth/plugins/email_notification/smtp.py
@@ -0,0 +1,62 @@
+# Copyright 2025 The Wazo Authors  (see the AUTHORS file)
+# SPDX-License-Identifier: GPL-3.0-or-later
+
+import smtplib
+from email import utils as email_utils
+from email.mime.text import MIMEText
+
+from wazo_auth.interfaces import BaseEmailNotification, EmailDestination
+
+# NOTE(sileht): default socket timeout is None on linux
+# Our client http client is 10s, since sending mail is currently synchronous
+# we have to be sure we return before the 10s, so we set the SMTP timeout.
+SMTP_TIMEOUT = 4
+
+
+class SMTPEmail(BaseEmailNotification):
+    def __init__(self, *args, **kwargs) -> None:
+        if 'config' not in kwargs:
+            raise Exception("Missing 'config' argument to initialize plugin")
+        if 'template_formatter' not in kwargs:
+            raise Exception(
+                "Missing 'template_formatter' argument to initialize plugin"
+            )
+
+        config = kwargs['config']
+        self._formatter = kwargs['template_formatter']
+        self._host = config['smtp']['hostname']
+        self._port = config['smtp']['port']
+        self._confirmation_from = EmailDestination(
+            config['email_confirmation_from_name'],
+            config['email_confirmation_from_address'],
+        )
+        self._password_reset_from = EmailDestination(
+            config['password_reset_from_name'], config['password_reset_from_address']
+        )
+
+    def send_confirmation(self, context: dict) -> None:
+        body = self._formatter.format_confirmation_email(context)
+        subject = self._formatter.format_confirmation_subject(context)
+        to = EmailDestination(context['username'], context['email_address'])
+        self._send(to, self._confirmation_from, subject, body)
+
+    def send_password_reset(self, context: dict) -> None:
+        body = self._formatter.format_password_reset_email(context)
+        subject = self._formatter.format_password_reset_subject(context)
+        to = EmailDestination(context['username'], context['email_address'])
+        self._send(to, self._password_reset_from, subject, body)
+
+    def _send(
+        self,
+        to: EmailDestination,
+        from_: EmailDestination,
+        subject: str,
+        body: str,
+    ) -> None:
+        msg = MIMEText(body)
+        msg['To'] = email_utils.formataddr(to)
+        msg['From'] = email_utils.formataddr(from_)
+        msg['Subject'] = subject
+
+        with smtplib.SMTP(self._host, self._port, timeout=SMTP_TIMEOUT) as server:
+            server.sendmail(from_.address, [to.address], msg.as_string())
diff --git a/wazo_auth/plugins/http/password_reset/http.py b/wazo_auth/plugins/http/password_reset/http.py
index a2906a9c..867ba7b7 100644
--- a/wazo_auth/plugins/http/password_reset/http.py
+++ b/wazo_auth/plugins/http/password_reset/http.py
@@ -1,4 +1,4 @@
-# Copyright 2018-2024 The Wazo Authors  (see the AUTHORS file)
+# Copyright 2018-2025 The Wazo Authors  (see the AUTHORS file)
 # SPDX-License-Identifier: GPL-3.0-or-later
 
 import logging
@@ -16,6 +16,9 @@ from .schemas import PasswordResetPostParameters, PasswordResetQueryParameters
 
 logger = logging.getLogger(__name__)
 
+# Always return 204 to avoid to leak information
+RESPONSE_204 = '', 204
+
 
 class PasswordReset(http.ErrorCatchingResource):
     def __init__(self, auth_client, email_service, user_service):
@@ -36,29 +39,31 @@ class PasswordReset(http.ErrorCatchingResource):
         search_params = {field: value for field, value in args.items() if value}
         users = self.user_service.list_users(**search_params)
         if not users:
-            # We do not want to leak the information if a user exists or not
             logger.debug('Failed to reset password %s', args)
-        else:
-            user = users[0]
-            logger.debug('user: %s', user)
-            email_address = args['email_address'] or self._extract_email(user)
-
-            if self.user_service.uses_external_authentication(user):
-                logger.info(
-                    'Not sending password reset mail because of external authentication'
-                )
-            elif email_address:
-                connection_params = extract_connection_params(request.headers)
-                self.email_service.send_reset_email(
-                    user['uuid'],
-                    user['username'],
-                    email_address,
-                    connection_params,
-                )
-            else:
-                logger.debug('No confirmed email %s', args)
-
-        return '', 204
+            return RESPONSE_204
+
+        user = users[0]
+        logger.debug('user: %s', user)
+
+        if self.user_service.uses_external_authentication(user):
+            logger.info(
+                'Not sending password reset notification because of external authentication'
+            )
+            return RESPONSE_204
+
+        email_address = args['email_address'] or self._extract_email(user)
+        if not email_address:
+            logger.debug('No confirmed email %s', args)
+            return RESPONSE_204
+
+        connection_params = extract_connection_params(request.headers)
+        self.email_service.send_reset_email(
+            user['uuid'],
+            user['username'],
+            email_address,
+            connection_params,
+        )
+        return RESPONSE_204
 
     def post(self):
         token_id = extract_token_id_from_query_or_header()
@@ -83,7 +88,7 @@ class PasswordReset(http.ErrorCatchingResource):
                 user_uuid, None, args['password'], reset=True
             )
 
-        return '', 204
+        return RESPONSE_204
 
     def _extract_email(self, user):
         for email in user['emails']:
diff --git a/wazo_auth/services/email.py b/wazo_auth/services/email.py
index 9ef4e500..ca086502 100644
--- a/wazo_auth/services/email.py
+++ b/wazo_auth/services/email.py
@@ -1,37 +1,17 @@
-# Copyright 2018-2024 The Wazo Authors  (see the AUTHORS file)
+# Copyright 2018-2025 The Wazo Authors  (see the AUTHORS file)
 # SPDX-License-Identifier: GPL-3.0-or-later
 
-import smtplib
 import time
-from collections import namedtuple
-from email import utils as email_utils
-from email.mime.text import MIMEText
 
 from wazo_auth.services.helpers import BaseService
 
-EmailDestination = namedtuple('EmailDestination', ['name', 'address'])
-
-# NOTE(sileht): default socket timeout is None on linux
-# Our client http client is 10s, since sending mail is currently synchronous
-# we have to be sure we return before the 10s, so we set the SMTP timeout.
-SMTP_TIMEOUT = 4
-
 
 class EmailService(BaseService):
-    def __init__(self, dao, config, template_formatter):
+    def __init__(self, dao, config, driver):
         super().__init__(dao)
-        self._formatter = template_formatter
-        self._smtp_host = config['smtp']['hostname']
-        self._smtp_port = config['smtp']['port']
+        self._driver = driver
         self._confirmation_token_expiration = config['email_confirmation_expiration']
         self._reset_token_expiration = config['password_reset_expiration']
-        self._confirmation_from = EmailDestination(
-            config['email_confirmation_from_name'],
-            config['email_confirmation_from_address'],
-        )
-        self._password_reset_from = EmailDestination(
-            config['password_reset_from_name'], config['password_reset_from_address']
-        )
 
     def confirm(self, email_uuid):
         self._dao.email.confirm(email_uuid)
@@ -39,47 +19,24 @@ class EmailService(BaseService):
     def send_confirmation_email(
         self, username, email_uuid, email_address, connection_params
     ):
-        template_context = dict(connection_params)
-        template_context.update(
-            {
-                'token': self._new_email_confirmation_token(email_uuid),
-                'username': username,
-                'email_uuid': email_uuid,
-                'email_address': email_address,
-            }
-        )
-
-        body = self._formatter.format_confirmation_email(template_context)
-        subject = self._formatter.format_confirmation_subject(template_context)
-        to = EmailDestination(username, email_address)
-        self._send_msg(to, self._confirmation_from, subject, body)
+        partial_context = {
+            'token': self._new_email_confirmation_token(email_uuid),
+            'username': username,
+            'email_uuid': email_uuid,
+            'email_address': email_address,
+        }
+        context = connection_params | partial_context
+        self._driver.send_confirmation(context)
 
     def send_reset_email(self, user_uuid, username, email_address, connection_params):
-        template_context = dict(connection_params)
-        template_context.update(
-            {
-                'token': self._new_email_reset_token(user_uuid),
-                'username': username,
-                'user_uuid': user_uuid,
-                'email_address': email_address,
-            }
-        )
-
-        body = self._formatter.format_password_reset_email(template_context)
-        subject = self._formatter.format_password_reset_subject(template_context)
-        to = EmailDestination(username, email_address)
-        self._send_msg(to, self._password_reset_from, subject, body)
-
-    def _send_msg(self, to, from_, subject, body):
-        msg = MIMEText(body)
-        msg['To'] = email_utils.formataddr(to)
-        msg['From'] = email_utils.formataddr(from_)
-        msg['Subject'] = subject
-
-        with smtplib.SMTP(
-            self._smtp_host, self._smtp_port, timeout=SMTP_TIMEOUT
-        ) as server:
-            server.sendmail(from_.address, [to.address], msg.as_string())
+        partial_context = {
+            'token': self._new_email_reset_token(user_uuid),
+            'username': username,
+            'user_uuid': user_uuid,
+            'email_address': email_address,
+        }
+        context = connection_params | partial_context
+        self._driver.send_password_reset(context)
 
     def _new_email_confirmation_token(self, email_uuid):
         acl = f'auth.emails.{email_uuid}.confirm.edit'
--- a/wazo_auth-1.0.egg-info/entry_points.txt
+++ b/wazo_auth-1.0.egg-info/entry_points.txt
@@ -50,3 +50,5 @@
 default_user = wazo_auth.plugins.metadata.default_user:DefaultUser
 user_admin_status = wazo_auth.plugins.metadata.user_admin_status:UserAdminStatus

+[wazo_auth.email_notification]
+smtp = wazo_auth.plugins.email_notification.smtp:SMTPEmail
